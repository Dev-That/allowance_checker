let connectedWallet=null,web3instance=null,connectedToChain="";const setConnectedChain=async()=>{connectedToChain=await window.ethereum.request({method:"eth_chainId"})},setWallet=e=>{connectedWallet=e,setConnectedChain()},connectMM=e=>{window.ethereum.request({method:"eth_requestAccounts"}).then(e=>{setWallet(e[0])}).catch(e=>{console.log("Canceled")})},initApp=async()=>{if(!("object"==typeof window.ethereum))return console.log("Metamask not installed");web3instance=await new Web3(window.ethereum),window.ethereum.on("accountsChanged",e=>{e.length<1?console.log("disconnected"):connectedWallet==e[0]&&console.log("already connected")});window.ethereum.isConnected();let e=!1;window.ethereum.on("connect",()=>{e=!0;const t=window.ethereum.isConnected();null===window.ethereum.selectedAddress&&t?setTimeout(()=>{null===window.ethereum.selectedAddress?connectMM():setWallet(window.ethereum.selectedAddress)},1e3):connectMM()}),window.ethereum.on("chainChanged",e=>{connectedToChain=e}),setTimeout(()=>{e||(null===window.ethereum.selectedAddress?connectMM():setWallet(window.ethereum.selectedAddress))},1e3);const t=()=>{$("#checkAllowance").attr("disabled",!1),$("#revoke").attr("disabled",!1)},n=async e=>{if(e.preventDefault(),!await(async()=>{const e=window.ethereum.isConnected()&&null!==window.ethereum.selectedAddress;await setConnectedChain();const t=connectedToChain===polygonChainID;return e||toastr.error("Wallet not connected"),t||toastr.warning("Wrong network"),e&&t})())return;const n=$('input[name="checkContract"]').val(),o=connectedWallet,c=$('input[name="spender"]').val(),r=e.target.id;if(n.length<1||!web3instance.utils.isAddress(n))return toastr.error("Token Contract is empty or incorrect");if(o.length<1||!web3instance.utils.isAddress(o))return toastr.error("Owner Address is empty or incorrect");if(c.length<1||!web3instance.utils.isAddress(c))return toastr.error("Spender Address is empty or incorrect");$("#allowanceTotal").remove(),$(`#${r}`).html('<div class="spinner-grow spinner-grow-sm" role="status"></div>'),$("#checkAllowance").attr("disabled",!0),$("#revoke").attr("disabled",!0);const a=await(e=>{if(web3instance){if(window[`initializedContract_${e}`])return window[`initializedContract_${e}`];{const t=new web3instance.eth.Contract(defaultABI,e);return window[`initializedContract_${e}`]=t,t}}})(n);if("checkAllowance"==r){try{await a.methods.symbol().call();const n=await a.methods.allowance(o,c).call();let r=0;if(n>0){let e=await web3instance.utils.fromWei(n);e>9999999&&(r="âˆž")}$("#allowance").append(`<span id="allowanceTotal">${r}</span>`),t()}catch(e){console.log(e),alert("Error"),t()}$("#checkAllowance").html("Check Allowance")}else a.methods.approve(c,"0").send({from:o}).on("receipt",async e=>{toastr.success("Success!"),$("#revoke").html("Revoke"),t()}).on("error",e=>{console.log("Unable to approve, error: ",e),$("#revoke").html("Revoke"),t()})};$("#checkAllowance").click(n),$("#revoke").click(n),$("#spender-dropdown .dropdown-item").click(e=>{$('input[name="spender"]').val(window[`router${e.target.id}`])}),$("#toke-dropdown .dropdown-item").click(e=>{const t=window.tokenContracts.polygonNetwork[`${e.target.id}`];$('input[name="checkContract"]').val(t)})};$(document).ready(initApp);