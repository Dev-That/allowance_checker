let connectedWallet = null, web3instance = null, connectedToChain = ""; const setConnectedChain = async () => { connectedToChain = await window.ethereum.request({ method: "eth_chainId" }) }, setWallet = e => { connectedWallet = e, setConnectedChain() }, connectMM = e => { window.ethereum.request({ method: "eth_requestAccounts" }).then(e => { setWallet(e[0]) }).catch(e => { console.log("Canceled") }) }, initApp = async () => { if (!("object" == typeof window.ethereum)) return console.log("Metamask not installed"); web3instance = await new Web3(window.ethereum), window.ethereum.on("accountsChanged", e => { e.length < 1 ? console.log("disconnected") : connectedWallet == e[0] && console.log("already connected") }); window.ethereum.isConnected(); window.ethereum.on("connect", () => { const e = window.ethereum.isConnected(); null === window.ethereum.selectedAddress && e ? setTimeout(() => { null === window.ethereum.selectedAddress ? connectMM() : setWallet(window.ethereum.selectedAddress) }, 1e3) : connectMM() }), window.ethereum.on("chainChanged", e => { connectedToChain = e }); const e = () => { $("#checkAllowance").attr("disabled", !1), $("#revoke").attr("disabled", !1) }, n = async n => { if (n.preventDefault(), !await (async () => { const e = window.ethereum.isConnected() && null !== window.ethereum.selectedAddress; await setConnectedChain(); const n = connectedToChain === polygonChainID; return e || toastr.error("Wallet not connected"), n || toastr.warning("Wrong network"), e && n })()) return; const t = $('input[name="checkContract"]').val(), o = connectedWallet, c = $('input[name="spender"]').val(), r = n.target.id; if (t.length < 1 || !web3instance.utils.isAddress(t)) return toastr.error("Token Contract is empty or incorrect"); if (o.length < 1 || !web3instance.utils.isAddress(o)) return toastr.error("Owner Address is empty or incorrect"); if (c.length < 1 || !web3instance.utils.isAddress(c)) return toastr.error("Spender Address is empty or incorrect"); $("#allowanceTotal").remove(), $(`#${r}`).html('<div class="spinner-grow spinner-grow-sm" role="status"></div>'), $("#checkAllowance").attr("disabled", !0), $("#revoke").attr("disabled", !0); const a = await (e => { if (web3instance) { if (window[`initializedContract_${e}`]) return window[`initializedContract_${e}`]; { const n = new web3instance.eth.Contract(defaultABI, e); return window[`initializedContract_${e}`] = n, n } } })(t); if ("checkAllowance" == r) { try { await a.methods.symbol().call(); const t = await a.methods.allowance(o, c).call(); let r = 0; if (t > 0) { let e = await web3instance.utils.fromWei(t); e > 9999999 && (r = "âˆž") } $("#allowance").append(`<span id="allowanceTotal">${r}</span>`), e() } catch (n) { console.log(n), alert("Error"), e() } $("#checkAllowance").html("Check Allowance") } else a.methods.approve(c, "0").send({ from: o }).on("receipt", async n => { toastr.success("Success!"), $("#revoke").html("Revoke"), e() }).on("error", n => { console.log("Unable to approve, error: ", n), $("#revoke").html("Revoke"), e() }) }; $("#checkAllowance").click(n), $("#revoke").click(n), $("#spender-dropdown .dropdown-item").click(e => { $('input[name="spender"]').val(window[`router${e.target.id}`]) }), $("#toke-dropdown .dropdown-item").click(e => { const n = window.tokenContracts.polygonNetwork[`${e.target.id}`]; $('input[name="checkContract"]').val(n) }) }; $(document).ready(initApp);